
import java.util.*;
import java.io.*;
import java.nio.file.Files;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

package StockSimulation;

class Product extends Thread 
{

    private String name;
    private int balance = 0;
    private int transNum;

    Product(String n, int b, int t) 
    {
        name = n;
        balance = b;
        transNum = t;
    }

    public int getTran() 
    {

        return transNum;
    }

    public String getProduct() 
    {
        return name;
    }

    public int getPrice() 
    {
        return balance;
    }

    public void addToStock(int price) 
    {
        balance += price;
        Product pr = (Product) Thread.currentThread();

        System.out.println("T" + pr.getName() + "  " + "transaction " + pr.transNum + "  " + "+ " + price + " balance " + "=  " + balance);
        //System.out.println("%s" + " > " + "trans" + " %d " + "  " + "+%d" + "  " + ProductList.get(i).getProduct() + "balance" + " = " + //product balalnce, Thread.currentThread().getName() 
        //System.out.println("%s" + " > " + " Buying Complete",Thread.currentThread().getName());
        for (int i = 0; i < 4; i++) {

        }
    }

    /*String line = scan.nextLine();
                String [] buf = line.split(",");
                if(buf[0].equals("P")){ 
                    int age = Integer.parseInt(buf[2].trim());
                    int year = Integer.parseInt(buf[3].trim());
                    CH[i] = new Princess(buf[1],age,year);
                }*/
    public void removeFromStock(int price) 
    {
        Product pr = (Product) Thread.currentThread();

        if (balance >= price) {
            balance -= price;
            System.out.println("T" + pr.getName() + "  " + "transaction " + pr.transNum + "  " + "- " + price + " balance " + "=  " + balance);
            //System.out.println("%s" + " > " + "trans" + " %d " + "  " + "-%d" + "  " + ProductList.get(i).getProduct() + "balance" + " = " + //product balalnce, Thread.currentThread().getName()
        } else {
            balance = 0;
            System.out.println("T" + pr.getName() + "  " + "transaction " + pr.transNum + "  " + "- " + price + " balance " + "=  " + balance);
            //System.out.println("%s" + " > " + "trans" + " %d " + "  " + "-%d" + "  " + ProductList.get(i).getProduct() + "balance" + " = " + //product balalnce, Thread.currentThread().getName()
        }
        //System.out.println("%s" + " > " + " Selling Complete",Thread.currentThread().getName());
        
    }

}

class VenderThread extends Thread {
    
    ArrayList<Product> allStock = new ArrayList<>();
    public VenderThread (ArrayList<Product> vt,String name)
    {
    super(name);    
    allStock = vt;
    }
    int[] money = new int[4];
    int addBalance = 0;
    int removeBalance = 0;
    //String item1 = product[1];
    ArrayList<Product> item = new ArrayList<>();
    /* item1 = {item1, money[1], addBalance1, removeBalance1};
     item2 = {item1, money[2], addBalance2, removeBalance2};
     item3 = {item1, money[3], addBalance3, removeBalance3};
     item4 = {item1, money[4], addBalance4, removeBalance4};*/

    public void addData(String namedata, int money) 
    {
        
        for (int j = 0; j <= 4; j++) {

        }

    }

}

class v1 extends Thread 
{

}

public class StockSimulator
{

    public static void main(String[] args)
    throws FileNotFoundException 
    {
        Thread VT = Thread.currentThread();
        //VenderThread VT = new Thread();
        // Product[] product = new Product[4];
        String[] product = new String[4]; //product name 
        ArrayList<Product> allItem = new ArrayList<>();
        // tranname, itemname, num

        boolean correct_file = true;
        while (correct_file) 
        {
            try 
            {
                Scanner scan = new Scanner(System.in);

                System.out.printf("%s > Enter product file = ", Thread.currentThread().getName());
                Scanner input = new Scanner(System.in);
                File file = new File(input.nextLine());
                input = new Scanner(file);

                for (int j = 0; j < product.length; j++) 
                {
                    String line = input.nextLine();
                    String[] buffer = line.split("\n");
                    String product_name;
                    //VenderThread v = new VenderThread(product_name);
                    product[j] = buffer[0];

                }

                /*for (int i = 0; i < product.length; i++) {
                    System.out.println(product[i]);
                }*/ correct_file = false;
            } 
            catch (Exception e) 
            {
                System.err.println(e);
            }
        }
        correct_file = true;

        ///////////////////////////////////////////////////////////////////////////////////////////////////
        while (correct_file) 
        {
            try 
            {
                System.out.printf("%s > enter transaction file for vendor 1 = ", Thread.currentThread().getName());
                Scanner inputv1 = new Scanner(System.in);
                File filev1 = new File(inputv1.nextLine());
                inputv1 = new Scanner(filev1);
                while (inputv1.hasNextLine()) {
                    String line = inputv1.nextLine();
                    String[] buffer = line.split(",");
                    String name_p1 = buffer[1];
                    int trans1 = Integer.parseInt(buffer[0].trim());
                    int price1 = Integer.parseInt(buffer[2].trim());
                    Product p1 = new Product(name_p1, price1, trans1);

                    allItem.add(p1);
                }
                for (int i = 0; i < allItem.size(); i++) 
                {
                    System.out.print(allItem.get(i).getTran());

                    System.out.print("\t\t");
                    System.out.print(allItem.get(i).getProduct());

                    System.out.print("\t\t");
                    System.out.print(allItem.get(i).getPrice());
                    System.out.print("\n");
                    correct_file = false;
                }

            } 
            catch (Exception e) 
            {
                System.err.println(e);
            }
        }
        correct_file = true;

        ///////////////////////////////////////////////////////////////////////////////////////////////////////.
        while (correct_file) 
        {
            try 
            {
                System.out.printf("%s > enter transaction file for vendor 2 = ", Thread.currentThread().getName());
                Scanner inputv2 = new Scanner(System.in);
                File filev2 = new File(inputv2.nextLine());
                inputv2 = new Scanner(filev2);
                while (inputv2.hasNextLine()) 
                {
                    String line = inputv2.nextLine();
                    String[] buffer = line.split(",");
                    String name_p2 = buffer[1];
                    int trans2 = Integer.parseInt(buffer[0].trim());
                    int price2 = Integer.parseInt(buffer[2].trim());
                    Product p2 = new Product(name_p2, price2, trans2);

                    allItem.add(p2);
                }

                for (int i = 0; i < allItem.size(); i++) 
                {
                    System.out.print(allItem.get(i).getTran());

                    System.out.print("\t\t");
                    System.out.print(allItem.get(i).getProduct());

                    System.out.print("\t\t");
                    System.out.print(allItem.get(i).getPrice());
                    System.out.print("\n");
                    correct_file = false;

                }
            } 
            catch (Exception e) 
            {
                System.err.println(e);
            }

        }
        correct_file = true;

        ///////////////////////////////////////////////////////////////////////////////////////////////////////
        while (correct_file) 
        {
            try 
            {
                System.out.printf("%s > enter transaction file for vendor 3 = ", Thread.currentThread().getName());
                Scanner inputv3 = new Scanner(System.in);
                File filev3 = new File(inputv3.nextLine());
                inputv3 = new Scanner(filev3);
                while (inputv3.hasNextLine()) 
                {
                    String line = inputv3.nextLine();
                    String[] buffer = line.split(",");
                    String name_p3 = buffer[1];
                    int trans3 = Integer.parseInt(buffer[0].trim());
                    int price3 = Integer.parseInt(buffer[2].trim());
                    Product p3 = new Product(name_p3, price3, trans3);

                    allItem.add(p3);
                }

                /*for (int i = 0; i < allStock.size(); i++) {
                    System.out.print(allStock.get(i).getTran());
                    
                    System.out.print("\t\t");
                    System.out.print(allStock.get(i).getProduct());
                    
                    System.out.print("\t\t");
                    System.out.print(allStock.get(i).getPrice());
                    System.out.print("\n");*/
                correct_file = false;

            } 
            catch (Exception e) 
            {
                System.err.println(e);
            }
        }
        VenderThread v1 = new VenderThread(allItem, "T1");
        VenderThread v2 = new VenderThread(allItem, "T2");
        VenderThread v3 = new VenderThread(allItem, "T3");
        //////////////////////////////////////////////////////////////////////////////////////////////////////

    }
}
