import java.util.*;
import java.io.*;
import java.nio.file.Files;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;
import java.util.concurrent.CyclicBarrier;



class Product implements Comparable<Product>
{

    private String name;
    private int balance = 0, buy_product = 0, sale_product = 0;

    Product(String n) 
    {
        name = n;
    }

    public String getProduct() 
    {
        String n = name;
        return n;
    }

    
    public int getPrice() 
    {
        int b = balance;
        return b;
    }

    public void addToStock(int price) 
    {
        balance = balance + price;
        buy_product = buy_product+price;
    }
    
    public void removeFromStock(int price) 
    {
        int p = price*(-1);
        if (balance > p) {
            balance = balance - p;
            sale_product = sale_product - p;
        } 
        else if (balance < p) {
            balance = 0;
            sale_product = balance - sale_product;
        }
        
    }
    
    public void reset_value()
    {
       balance = 0;
       sale_product = 0;
       buy_product = 0;
    }  
          
    public void print() {
        System.out.printf("%s > %-20s buy = %-10d sales = %-10d balancec = %d\n", 
                          Thread.currentThread().getName(), name, buy_product, sale_product, balance);
    }

    
    @Override
    public int compareTo(Product other) {
        if (this.balance > other.balance) 
            return -1;
         else if (this.balance < other.balance) 
            return 1;
        
        if (this.name.compareToIgnoreCase(other.name) > 0) 
            return 1;
         else 
            return -1;
        
    }
}



class VenderThread extends Thread  {
    private int round;
    private Scanner input;
    private CyclicBarrier barrier1;
    private int price,transNum;
    private String thread_name, product_name;
    ArrayList<Product> allStock = new ArrayList<>();
    
    
    VenderThread (String tname,String pname,int b,int t, CyclicBarrier ba)
    {
        super(tname);
        product_name = pname;
        barrier1=ba;
        price = b;
        thread_name = tname;
        transNum = t;
       
    }
    VenderThread (ArrayList<Product> vt)
    {
       
        allStock = vt;
    }
    
    
            
    
    /*public int await(){
    
        throws InterruptedException; 
        
        BrokenBarrierException;
    }*/
    
    @Override
    public void run() 
{
        //if buying  
        synchronized (allStock) 
    {
            if (price > 0) 
            {
                for (int i = 0; i < allStock.size(); i++) 
                {
                    if (product_name.trim().equalsIgnoreCase(allStock.get(i).getProduct().trim())) 
                    {
                        allStock.get(i).addToStock(price);
                        System.out.printf("%s > transaction %-5d +%d %-30s balance = %d\n", 
                        Thread.currentThread().getName(), transNum, price, product_name, allStock.get(i).getPrice()); 
                    }        
                }
            }
            try{ barrier1.await();}
            catch(Exception e){ System.err.print(e);}
            
            }
                
        barrier1.reset();
        
        try{
            
        Thread.sleep(1000);
        }
        catch(Exception e){ System.err.print(e);}
        
            
            synchronized (allStock) 
   {
            if (price < 0) 
            {
                for (int i = 0; i < allStock.size(); i++) 
                {
                    if (product_name.trim().equalsIgnoreCase(allStock.get(i).getProduct().trim())) 
                    {
                        allStock.get(i).removeFromStock(price);
                        System.out.printf("%s > transaction %-5d %d %-30s balance = %d\n",
                        Thread.currentThread().getName(), transNum, price, product_name, allStock.get(i).getPrice());
                    }
                }
            }
    } 
            

        try {
            barrier1.await();
        } catch (Exception e) {
            System.err.println(e);
        }
    
    }
    
}



public class StockSimulator
{
    public static void main(String[] args)
            
    throws FileNotFoundException 
    {
        
        Thread ss = Thread.currentThread();
        ArrayList<VenderThread> Vlist= new ArrayList<>();
        Thread v1= new Thread();
        Thread v2= new Thread();
        Thread v3= new Thread();
        String filev1=null,filev2=null,filev3=null;
       

        int numThread=4;
        CyclicBarrier barrier = new CyclicBarrier(numThread);
        
        ArrayList<Product> productList = new ArrayList<>();
        // tranname, itemname, num
        
        boolean correct_file = true;
        while (correct_file) 
        {
            try 
            {
                Scanner scan = new Scanner(System.in);

                System.out.printf("%s > Enter product file = ", Thread.currentThread().getName());
                Scanner input = new Scanner(System.in);
                File product_file = new File(input.nextLine());
                input = new Scanner(product_file);

                while (input.hasNext())
                {
                    String line = input.nextLine();
                    String product_name= line;
                    Product name = new Product(product_name);
                    productList.add(name);
                }
                VenderThread p = new VenderThread(productList);
                /*for (int i = 0; i < product.length; i++) {
                    System.out.println(product[i]);
                }*/ 
                correct_file = false;
            } 
            catch (Exception e) 
            {
                System.err.println(e);
            }
        }
        correct_file = true;
        ///////////////////////////////////////////////////////////////////////////////////////////////////
        while (correct_file) 
        {
            try 
            {
                System.out.printf("%s > enter transaction file for vendor 1 = ", Thread.currentThread().getName());
                Scanner inputv1 = new Scanner(System.in);
                filev1 = inputv1.nextLine();
                inputv1 = new Scanner(new File(filev1));
                while (inputv1.hasNextLine()) {
                    String line = inputv1.nextLine();
                    String[] buffer = line.split(",");
                    String name_p1 = buffer[1];
                    int trans1 = Integer.parseInt(buffer[0].trim());
                    int price1 = Integer.parseInt(buffer[2].trim());
                    v1= new VenderThread("v1",name_p1,price1,trans1,barrier); 
                }
            correct_file = false;
            } 
            catch (Exception e) 
            {
                System.err.println(e);
            }
        }
        correct_file = true;

        ///////////////////////////////////////////////////////////////////////////////////////////////////////.
        while (correct_file) 
        {
            try 
            {
                System.out.printf("%s > enter transaction file for vendor 2 = ", Thread.currentThread().getName());
                Scanner inputv2 = new Scanner(System.in);
                filev2 = inputv2.nextLine();
                inputv2 = new Scanner(new File(filev2));
                while (inputv2.hasNextLine()) 
                {
                    String line = inputv2.nextLine();
                    String[] buffer = line.split(",");
                    String name_p2 = buffer[1];
                    int trans2 = Integer.parseInt(buffer[0].trim());
                    int price2 = Integer.parseInt(buffer[2].trim());
                    v2= new VenderThread("v2",name_p2,price2,trans2,barrier);
                   
                }
                
                correct_file = false;
            } 
            catch (Exception e) 
            {
                System.err.println(e);
            }

        }
        correct_file = true;

        ///////////////////////////////////////////////////////////////////////////////////////////////////////
        while (correct_file) 
        {
            try 
            {
                System.out.printf("%s > enter transaction file for vendor 3 = ", Thread.currentThread().getName());
                Scanner inputv3 = new Scanner(System.in);
                filev3 = inputv3.nextLine();
                inputv3 = new Scanner(new File(filev3));
                while (inputv3.hasNextLine()) 
                {
                    String line = inputv3.nextLine();
                    String[] buffer = line.split(",");
                    String name_p3 = buffer[1];
                    int trans3 = Integer.parseInt(buffer[0].trim());
                    int price3 = Integer.parseInt(buffer[2].trim());
                    v3= new VenderThread("v3",name_p3,price3,trans3,barrier);
                }
                
                correct_file = false;

            } 
            catch (Exception e) 
            {
                System.err.println(e);
            }
        }
        //////////////////////////////////////////////////////////////////////////////////////////////////////
        
        boolean loop =true;
        int round=1;
        
        while (loop) {
            System.out.printf("\n%s > ------------------------\n", Thread.currentThread().getName());
            System.out.printf("%s > Stock Simulation Round %d\n", Thread.currentThread().getName(), round);
            System.out.printf("%s > ------------------------\n\n", Thread.currentThread().getName());

            v1.start();
            v2.start();
            v3.start();
            
            try {
                barrier.await();
            } catch (Exception e) {
                System.err.println(e);
            }
            
            barrier.reset();
            
            
           
            Collections.sort(productList);
            System.out.printf("\n");
            for (int i = 0; i < 4; i++) {
                productList.get(i).print();
            }

            
           System.out.printf("\n\n %s > Run another simulation? (y/n)  ", Thread.currentThread().getName());
           Scanner ask = new Scanner(System.in);
           String ans = ask.next(); 
           int a;
           if(ans.equalsIgnoreCase("y")) a=0;
           else a=1;
           switch(a)
           {
               case 0: 
               loop=true;
               round++;
               try{
               barrier.reset();
               v1.join();
               v2.join();
               v3.join();
                Scanner inputv1 = new Scanner(new File(filev1));
                while (inputv1.hasNextLine()) {
                    String line = inputv1.nextLine();
                    String[] buffer = line.split(",");
                    String name_p1 = buffer[1];
                    int trans1 = Integer.parseInt(buffer[0].trim());
                    int price1 = Integer.parseInt(buffer[2].trim());
                    v1= new VenderThread("v1",name_p1,price1,trans1,barrier); 
                }
                Scanner inputv2 = new Scanner(new File(filev2));
                while (inputv2.hasNextLine()) 
                {
                    String line = inputv2.nextLine();
                    String[] buffer = line.split(",");
                    String name_p2 = buffer[1];
                    int trans2 = Integer.parseInt(buffer[0].trim());
                    int price2 = Integer.parseInt(buffer[2].trim());
                    v2= new VenderThread("v2",name_p2,price2,trans2,barrier);
                   
                }
                Scanner inputv3 = new Scanner(new File(filev3));
                while (inputv3.hasNextLine()) 
                {
                    String line = inputv3.nextLine();
                    String[] buffer = line.split(",");
                    String name_p3 = buffer[1];
                    int trans3 = Integer.parseInt(buffer[0].trim());
                    int price3 = Integer.parseInt(buffer[2].trim());
                    v3= new VenderThread("v3",name_p3,price3,trans3,barrier);
                }
               for (int i = 0; i < productList.size(); i++) {
                    productList.get(i).reset_value();
                }   
               }catch(Exception e){           
                   System.err.println();                  
               }
                           
               break;
               
               case 1:
               
                loop=false;
                System.exit(0);
                break; 
               
           }
    }
        
}
}
